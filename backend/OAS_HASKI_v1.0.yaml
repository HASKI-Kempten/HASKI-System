openapi: "3.0.3"
info:
  description: "This is the HASKI API documentation"
  version: "1.0"
  title: "HASKI API"
servers:
  - url: http://haksi.whatever.com/v1.0
tags:
- name: "HASKI-intern"
  description: "Communication between Backend and Frontend"
- name: "moodle"
  description: "Extension to communicate with Moodle LMS"
paths:
  /elements:
    get:
      tags:
      - "HASKI-intern"
      summary: "Get all elements"
      description: "Get the data for all Elements"
      operationId: "getAllElements"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Elements'
        "400":
          description: "Invalid ID supplied"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Student not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
    post:
      tags:
      - "HASKI-intern"
      summary: "Upload element"
      description: "Upload the information of an element"
      operationId: "uploadElement"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ElementUpload'
      responses:
        "201":
          description: "Element was created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Element"
        "400":
          description: "Invalid ID supplied"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Student not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
  /elements/{elementId}:
    get:
      tags: 
      - "HASKI-intern"
      summary: "Get element"
      description: "Get the data for a specific Element"
      operationId: "getElementData"
      parameters:
      - name: "elementId"
        in: "path"
        description: "ID of the element"
        required: true
        schema:
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Element'
        "400":
          description: "Invalid ID supplied"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Student not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
    put:
      tags: 
      - "HASKI-intern"
      summary: "Update element"
      description: "Update the information of an element"
      operationId: "updateElement"
      parameters:
      - name: "elementId"
        in: "path"
        description: "ID of the element"
        required: true
        schema:
          type: "integer"
          format: "int64"
      - name: "body"
        in: "header"
        description: "The new information about an element"
        required: true
        schema: 
          $ref: "#/components/schemas/Element"
      responses:
        "201":
          description: "Element was updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Element"
        "400":
          description: "Invalid ID supplied"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Student not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
  /learningPath:
    post:
      tags:
      - "HASKI-intern"
      summary: "Upload learning path"
      description: "Upload the inital learning path"
      operationId: "uploadInitalLearningPath"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LearningPathUpload'
      responses:
        "201":
          description: "Learning Path was created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LearningPath"
        "400":
          description: "Invalid ID supplied"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Student not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
  /learningPath/{pathId}/{moduleId}:
    get:
      tags: 
      - "HASKI-intern"
      summary: "Get Learning Path"
      description: "Get the currently saved Learning Path for a specific module"
      operationId: "getLearningPath"
      parameters:
      - name: "pathId"
        in: "path"
        description: "ID of the path"
        required: true
        schema:
          type: "integer"
          format: "int64"
      - name: "moduleId"
        in: "path"
        description: "ID of the module"
        required: true
        schema:
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LearningPath'
        "400":
          description: "Invalid ID supplied"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Student not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
    put:
      tags: 
      - "HASKI-intern"
      summary: "Update Learning Path"
      description: "Update the Learning Path of a module"
      operationId: "updateLearningPath"
      parameters:
      - name: "pathId"
        in: "path"
        description: "ID of the path"
        required: true
        schema:
          type: "integer"
          format: "int64"
      - name: "moduleId"
        in: "path"
        description: "ID of the path"
        required: true
        schema:
          type: "integer"
          format: "int64"
      - name: "body"
        in: "header"
        description: "The new Learning Path"
        required: true
        schema: 
          $ref: "#/components/schemas/LearningPathUpload"
      responses:
        "201":
          description: "Learning Path was updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LearningPath"
        "400":
          description: "Invalid ID supplied"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Student not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
  /learningWay/{studentId}/{moduleId}:
    post:
      tags:
      - "HASKI-intern"
      summary: "Upload learning way"
      description: "Upload the inital learning way for a student"
      operationId: "uploadInitalLearningWay"
      parameters:
      - name: "studentId"
        in: "path"
        description: "ID of the student"
        required: true
        schema:
          type: "integer"
          format: "int64"
      - name: "moduleId"
        in: "path"
        description: "ID of the module"
        required: true
        schema:
          type: "integer"
          format: "int64"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LearningWayUpload'
      responses:
        "201":
          description: "Learning Way was created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LearningWay"
        "400":
          description: "Invalid ID supplied"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Student not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
  /learningWay/{studentId}/{moduleId}/{learningWayId}:
    get:
      tags: 
      - "HASKI-intern"
      summary: "Get Learning Way"
      description: "Get the currently saved Learning Way for a specific student"
      operationId: "getLearningWay"
      parameters:
      - name: "studentId"
        in: "path"
        description: "ID of the student"
        required: true
        schema:
          type: "integer"
          format: "int64"
      - name: "moduleId"
        in: "path"
        description: "ID of the module"
        required: true
        schema:
          type: "integer"
          format: "int64"
      - name: "learningWayId"
        in: "path"
        description: "ID of the learning way"
        required: true
        schema:
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LearningWay'
        "400":
          description: "Invalid ID supplied"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Student not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
    put:
      tags: 
      - "HASKI-intern"
      summary: "Update Learning Way"
      description: "Update the Learning Way of a student by themself"
      operationId: "updateLearningWay"
      parameters:
      - name: "studentId"
        in: "path"
        description: "ID of the student"
        required: true
        schema:
          type: "integer"
          format: "int64"
      - name: "moduleId"
        in: "path"
        description: "ID of the module"
        required: true
        schema:
          type: "integer"
          format: "int64"
      - name: "learningWayId"
        in: "path"
        description: "ID of the learning way"
        required: true
        schema:
          type: "integer"
          format: "int64"
      - name: "body"
        in: "header"
        description: "The new Learning Way"
        required: true
        schema: 
          $ref: "#/components/schemas/LearningWayUpload"
      responses:
        "201":
          description: "Learning Way was updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LearningWay"
        "400":
          description: "Invalid ID supplied"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Student not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
  /modules:
    get:
      tags:
      - "HASKI-intern"
      summary: "Get all modules"
      description: "Get the data for all Modules"
      operationId: "getAllModules"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Modules'
        "400":
          description: "Invalid ID supplied"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Student not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
    post:
      tags:
      - "HASKI-intern"
      summary: "Upload module"
      description: "Upload the information of a module"
      operationId: "uploadModule"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModuleUpload'
      responses:
        "201":
          description: "Element was created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Module"
        "400":
          description: "Invalid ID supplied"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Student not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
  /modules/{moduleId}:
    get:
      tags: 
      - "HASKI-intern"
      summary: "Get module"
      description: "Get the data for a specific Module"
      operationId: "getModuleData"
      parameters:
      - name: "moduleId"
        in: "path"
        description: "ID of the module"
        required: true
        schema:
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Module'
        "400":
          description: "Invalid ID supplied"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Student not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
    put:
      tags: 
      - "HASKI-intern"
      summary: "Update module"
      description: "Update the information of an module"
      operationId: "updateModule"
      parameters:
      - name: "moduleId"
        in: "path"
        description: "ID of the module"
        required: true
        schema:
          type: "integer"
          format: "int64"
      - name: "body"
        in: "header"
        description: "The new information about an module"
        required: true
        schema: 
          $ref: "#/components/schemas/ModuleUpload"
      responses:
        "201":
          description: "Module was updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Module"
        "400":
          description: "Invalid ID supplied"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Module not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
  /moodle/logs:
    post:
      tags:
      - "moodle"
      summary: "Upload logs"
      description: "Upload the logs collected by the Moodle LMS"
      operationId: "uploadLogs"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Logs'
      responses:
        "204":
          description: "The resource was uploaded successfully."
        "400":
          description: "Invalid ID supplied"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Student not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
  /moodle/questionnaire/{studentId}:
    post:
      tags:
      - "moodle"
      summary: "Upload questionnaire"
      description: "Upload the results of Felder and Silverman questionnaire"
      operationId: "uploadQuestionnaire"
      parameters:
      - name: "studentId"
        in: "path"
        description: "ID of the student"
        required: true
        schema:
          type: "integer"
          format: "int64"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Questionnaire'
      responses:
        "204":
          description: "The resource was uploaded successfully."
        "400":
          description: "Invalid ID supplied"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Student not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
  /moodle/element:
    post:
      tags:
      - "moodle"
      summary: "Upload element"
      description: "Upload an element from Moodle LMS"
      operationId: "uploadMoodleElement"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Element'
      responses:
        "204":
          description: "The resource was uploaded successfully."
        "400":
          description: "Invalid ID supplied"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Student not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
  /moodle/element/{studentId}:
    post:
      tags:
      - "moodle"
      summary: "Upload element by student"
      description: "Upload the element done by a student in Moodle LMS"
      operationId: "uploadMoodleElementByStudent"
      parameters:
      - name: "studentId"
        in: "path"
        description: "ID of the student"
        required: true
        schema:
          type: "integer"
          format: "int64"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LearningWayElements'
      responses:
        "204":
          description: "The resource was uploaded successfully."
        "400":
          description: "Invalid ID supplied"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Student not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
  /student:
    get:
      tags: 
      - "HASKI-intern"
      summary: "Get all students"
      description: "Get the data for all Students"
      operationId: "getAllStudentData"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Students'
        "400":
          description: "Invalid ID supplied"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Student not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
    post:
      tags:
      - "HASKI-intern"
      summary: "Upload student"
      description: "Upload the inital information of a student"
      operationId: "uploadInitalStudent"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudentUpload'
      responses:
        "201":
          description: "Student was created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Student"
        "400":
          description: "Invalid ID supplied"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Student not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
  /student/{studentId}:
    get:
      tags: 
      - "HASKI-intern"
      summary: "Get student"
      description: "Get the data for a specific Student"
      operationId: "getStudentData"
      parameters:
      - name: "studentId"
        in: "path"
        description: "ID of the student"
        required: true
        schema:
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        "400":
          description: "Invalid ID supplied"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Student not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
    put:
      tags: 
      - "HASKI-intern"
      summary: "Update student"
      description: "Update the student information and/or learning style"
      operationId: "updateStudent"
      parameters:
      - name: "studentId"
        in: "path"
        description: "ID of the student"
        required: true
        schema:
          type: "integer"
          format: "int64"
      - name: "body"
        in: "header"
        description: "The new Learning Style and Student Information"
        required: true
        schema: 
          $ref: "#/components/schemas/StudentUpdate"
      responses:
        "201":
          description: "Student was updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Student"
        "400":
          description: "Invalid ID supplied"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Student not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
  schemas:
    Element:
      type: "object"
      required:
      - "id"
      - "name"
      - "difficulty"
      - "creationDate"
      - "module"
      - "averageDuration"
      - "semester"
      - "style"
      - "proLIST"
      - "contraLIST"
      - "type"
      properties:
        id:
          type: "integer"
          format: "int64"
          example: 1234
          description: "ID of the element"
        name: 
          type: "string"
          example: "My test element"
          description: "Name of the element"
        difficulty:
          type: "string"
          example: "Leicht"
          description: "Level of difficulty of the element"
        creationDate:
          type: "integer"
          format: "int64"
          example: 1656330943
          description: "Date element was created in UNIX time stamp"
        module:
          type: "string"
          example: "Informatik I"
          description: "Module the element belongs to"
        averageDuration:
          type: "integer"
          format: "int64"
          example: 180
          description: "The time it takes in average to complete element in minutes"
        semester: 
          type: "integer"
          format: "int64"
          example: 1
          description: "The semester, in which the element will be done normally"
        style:
          type: "string"
          example: "visual"
          description: "Format the elemnt has"
        proLIST:
          type: "string"
          example: "Lorem Ipsum"
          description: "supported FSLSM-Dimension"
        contraLIST:
          type: "string"
          example: "Lorem Ipsum bad"
          description: "preventing FSLSM-Dimension"
        type: 
          type: "string"
          example: "h5p"
          description: "What kind of file extension the element is"
    Elements:
      type: "object"
      properties:
        elements:
          type: "array"
          description: "A list of elements"
          items: 
            $ref: '#/components/schemas/Element'
    ElementMeta:
      type: "object"
      required:
        - "elementId"
        - "position"
        - "id"
        - "learningPath"
      properties: 
        elementId:
          type: "integer"
          format: "int64"
          example: 123
          description: "ID of the element"
        position:
          type: "string"
          example: "1.1"
          description: "Position of the element in the path (horizontal.vertical)"
        id:
          type: "integer"
          format: "int64"
          example: 1
          description: "ID from the Database"
        learningPath:
          type: "integer"
          format: "int64"
          example: 1
          description: "ID of the learning Path"
    ElementMetaUpload:
      type: "object"
      required:
        - "elementId"
        - "position"
      properties: 
        elementId:
          type: "integer"
          format: "int64"
          example: 123
          description: "ID of the element"
        position:
          type: "string"
          example: "1.1"
          description: "Position of the element in the path (horizontal.vertical)"
    ElementUpload:
      type: "object"
      required:
      - "name"
      - "date"
      - "topic"
      - "semester"
      - "style"
      - "type"
      properties:
        name:
          type: "string"
          example: "My test Element"
          description: "Name of the Element to be uploaded"
        date: 
          type: "string"
          format: "date-time"
          description: "Date and time of the element to be uploaded"
        topic:
          type: "string"
          example: "Informatik I"
          description: "Name of the course of study the element belongs to"
        semester:
          type: "integer"
          format: "int64"
          example: 1
          description: "Semester in which the element is normally done"
        style: 
          type: "string"
          example: "visual"
          description: "The style the is associated to the element"
        type: 
          type: "string"
          example: "h5p"
          description: "What kind of file extension the element is"
    GeneralError: 
      type: "object"
      required: 
      - "code"
      - "message"
      properties: 
        code: 
          type: "integer"
          format: "int32"
          example: 404
          description: "The http error code of the error"
        message: 
          type: "string"
          example: "ID not found"
          description: "A short description of the error"
    LearningPath:
      type: "object"
      required: 
      - "id"
      - "moduleId"
      - "module"
      - "elements"
      properties:
        id:
          type: "integer"
          format: "int64"
          example: 123
          description: "ID of the learning path"
        moduleId:
          type: "integer"
          format: "int64"
          example: 987
          description: "ID of the module the path belongs to"
        module:
          type: "string"
          example: "Informatik I"
          description: "Name of the module the path belongs to"
        elements:
          type: "array"
          items: 
            $ref: '#/components/schemas/ElementMeta'
          description: "Elements belonging to the learning path"
    LearningPathUpload:
      type: "object"
      required: 
      - "moduleId"
      - "module"
      - "elements"
      properties:
        moduleId:
          type: "integer"
          format: "int64"
          example: 123
          description: "ID of the module"
        module:
          type: "string"
          example: "Informatik I"
          description: "Name of the module the path belongs to"
        elements:
          type: "array"
          items: 
            $ref: '#/components/schemas/ElementMetaUpload'
          description: "Elements belonging to the learning path"
    LearningWay:
      type: "object"
      required: 
      - "id"
      - "module"
      - "moduleId"
      - "studentId"
      - "elements"
      - "recommendedElement"
      properties:
        id:
          type: "integer"
          format: "int64"
          example: 123
          description: "ID of the learning way"
        module:
          type: "string"
          example: "Informatik I"
          description: "Name of the module the way belongs to"
        moduleId:
          type: "integer"
          format: "int64"
          example: 234
          description: "ID of the module"
        studentId:
          type: "integer"
          format: "int64"
          example: 987
          description: "ID of the student belonging to the learing way"
        elements:
          type: "array"
          items: 
            $ref: '#/components/schemas/LearningWayElements'
          description: "Elements belonging to the learning way"
        recommendedElement:
          type: "integer"
          format: "int64"
          example: 123
          description: "The ID of the element, which is recommended as next element"
    LearningWayElements:
      type: "object"
      required: 
      - "elementId"
      - "done"
      - "position"
      properties:
        elementId: 
          type: "integer"
          format: "int64"
          example: 123
          description: "ID of the Element"
        done:
          type: "boolean"
          example: true
          description: "Is the element already done?"
        doneAt:
          type: "integer"
          format: "int64"
          example: 1656331243
          description: "When was the element done by the student?"
        evaluation: 
          type: "string"
          example: "2.0"
          description: "The points or the grade a student scored in the element"
        position:
          type: "string"
          example: "1.1"
          description: "Position of the element in the path (horizontal.vertical)"
    LearningWayUpload:
      type: "object"
      required: 
      - "module"
      - "moduleId"
      - "studentId"
      - "elements"
      - "recommendedElement"
      properties:
        module:
          type: "string"
          example: "Informatik I"
          description: "Name of the module the way belongs to"
        moduleId:
          type: "integer"
          format: "int64"
          example: 234
          description: "ID of the module"
        studentId:
          type: "integer"
          format: "int64"
          example: 987
          description: "ID of the student belonging to the learing way"
        recommendedElement:
          type: "integer"
          format: "int64"
          example: 123
          description: "The ID of the element, which is recommended as next element"
        elements:
          type: "array"
          items: 
            $ref: '#/components/schemas/LearningWayElements'
          description: "Elements belonging to the learning way"
    Logs:
      type: "object"
      properties:
        date:
          type: "string"
          format: "date-time"
    Module:
      type: "object"
      required: 
      - "id"
      - "name"
      - "module"
      properties:
        id:
          type: "integer"
          format: "int64"
          example: 1
          description: "The ID of the module"
        name:
          type: "string"
          example: "Einführung in die Programmierung"
          description: "The name of the module"
        module:
          type: "string"
          example: "IT-1234"
          description: "The internal ID for this module"
        semester:
          type: "integer"
          format: "int64"
          example: 1
          description: "The semester in which the module is normally teached"
    ModuleUpload:
      type: "object"
      required: 
      - "name"
      - "module"
      - "semester"
      properties:
        name:
          type: "string"
          example: "Einführung in die Programmierung"
          description: "Name of the module"
        module:
          type: "string"
          example: "IT-1234"
          description: "The internal ID for this module"
        semester:
          type: "integer"
          format: "int64"
          example: 1
          description: "The semester in which the module is normally teached"
    Modules:
      type: "object"
      properties:
        modules:
          description: "A list of modules"
          type: "array"
          items: 
            $ref: '#/components/schemas/Module'
    QandA:
      type: "object"
      required: 
      - "id"
      - "question"
      - "answer"
      properties:
        id:
          type: "integer"
          format: "int64"
          example: 1
        question: 
          type: "string"
          example: "Ich verstehe etwas besser nachdem ich..."
        answer:
          type: "integer"
          format: "int64"
          example: 0
    Questionnaire:
      type: "object"
      required:
      - "answers"
      properties:
        questionnaire:
          type: "array"
          items: 
            $ref: '#/components/schemas/QandA'
    Student: 
      type: "object"
      required: 
      - "id"
      - "name"
      - "semester"
      - "style"
      properties:
        id:
          type: "integer"
          format: "int64"
          example: 1
          description: "The id of the student"
        name:
          type: "string"
          example: "Max Musterfrau"
          description: "The name of the student"
        semester:
          type: "integer"
          format: "int64"
          example: 2
          description: "The semester the student is in"
        style:
          type: "string"
          example: "Active, Verbal, Intuitive, Global"
          description: "The learning style that is associated to the student"
        courseOfStudy: 
          type: "string"
          example: "Angewandte Informatik"
          description: "The course the student is enrolled in"
        modules:
          type: "array"
          description: "The modules the student visits"
          items: 
            $ref: "#/components/schemas/StudentModule"
    Students:
      type: "object"
      properties:
        students:
          type: "array"
          description: "A list of students"
          items: 
            $ref: '#/components/schemas/Student'
    StudentModule:
      type: "object"
      required: 
      - "id"
      - "moduleId"
      - "studentId"
      properties: 
        id: 
          type: "integer"
          format: "int64"
          example: 1
          description: "ID from the Database"
        moduleId: 
          type: "integer"
          format: "int64"
          example: 1
          description: "ID of the module"
        studentId: 
          type: "integer"
          format: "int64"
          example: 1
          description: "ID of the student"
    StudentUpdate: 
      type: "object"
      required: 
      - "name"
      - "semester"
      - "courseOfStudy"
      - "style"
      - "modules"
      properties:
        name:
          type: "string"
          example: "Max Musterfrau"
          description: "The name of the student"
        semester:
          type: "integer"
          format: "int64"
          example: 2
          description: "The semester the student is in"
        courseOfStudy: 
          type: "string"
          example: "Angewandte Informatik"
          description: "The course the student is enrolled in"
        style:
          type: "string"
          example: "Active, Verbal, Intuitive, Global"
          description: "The learning style that is associated to the student"
        modules:
          type: "array"
          description: "The modules the student visits"
          items: 
            $ref: "#/components/schemas/Module"
    StudentUpload: 
      type: "object"
      required: 
      - "name"
      - "semester"
      properties:
        name:
          type: "string"
          example: "Max Musterfrau"
          description: "The name of the student"
        semester:
          type: "integer"
          format: "int64"
          example: 2
          description: "The semester the student is in"
        courseOfStudy: 
          type: "string"
          example: "Angewandte Informatik"
          description: "The course the student is enrolled in"